# === PART 1: VARIABLE DEFINITIONS AND BASIC CONFIGURATION ===

# Variables
substitutions:
  device_name: "rack_panelwent"  # Device name
  friendly_name: "Rack Cabinet"  # Friendly device name
  device_description: "Rack cabinet fan panel with thermostat and small OLED display SSD1306 64x48"  # Device description
  temperature_threshold_low: "29"  # Temperature at which the fan should start at minimum speed in Celsius
  temperature_threshold_high: "37"  # Temperature at which the fan should start at maximum speed in Celsius
  minimum_fan_speed: "5"  # Minimum fan speed in percentage

# Basic device configuration
esphome:
  project:
    name: "levvvy.${device_name}"
    version: "0.0.3"
  name: "rack-panelwent"
  on_boot:
    - priority: 200.0
      then:
        - output.set_level:
            id: pwmfan
            level: 100%
esp8266:
  board: d1_mini


# === PART 2: WIFI, API, OTA, LOGGER CONFIGURATION ===

# Enable logging
logger:

# API settings
api:
  encryption:
    key: "aXZaEOS9H+peyy9B8Q4MKGMQCVu0r4mFr2fvyT+Guj8="

# OTA update settings
ota:
  password: !secret ota_password

# WiFi settings
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.9.126
    gateway: 192.168.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case of WiFi connection issues
  ap:
    ssid: "Noctua Fallback Hotspot"
    password: !secret wifi_ap_password
captive_portal:


# === PART 3: I2C, TIME, AND FONTS CONFIGURATION ===

# I2C settings
i2c:
  sda: D2
  scl: D1
  scan: True

# Time settings
time:
  - platform: homeassistant
    id: esptime

globals:
  - id: automatic_fan_speed_enabled
    type: bool
    restore_value: true
    initial_value: "true"

switch:
  - platform: template
    name: "Toggle Automatic Fan Speed"
    id: toggle_automatic_fan_speed
    lambda: |- 
      return id(automatic_fan_speed_enabled);
    turn_on_action:
      - lambda: |- 
          id(automatic_fan_speed_enabled) = true;
    turn_off_action:
      - lambda: |- 
          id(automatic_fan_speed_enabled) = false;

# Fonts
font:
  - file: "gfonts://Roboto%20Mono@400"
    id: robotomono
    size: 9  
  - file: "gfonts://Bebas%20Neue"
    id: bebas
    size: 32
  - file:
      type: gfonts
      family: Roboto
      weight: 500
    id: robotob
    size: 11
  - file: "gfonts://VT323"
    id: pixel
    size: 11


# === PART 4: DISPLAY, INTERVAL, AND GRAPH CONFIGURATION ===

# Display configuration
display:
- platform: ssd1306_i2c
  model: "SSD1306 64x48"
  address: 0x3C
  update_interval: 5s
  id: wyswietlacz
  pages:
    - id: page1
      lambda: |-
       it.graph(0, 0, id(single_temperature_graph));
    - id: page2
      lambda: |-
       it.rectangle(0,0,64,15);
       it.printf(32, 11, id(pixel), TextAlign::BASELINE_CENTER, "%s", id(adresIP).state.c_str());
       it.circle(48,32,15);
       it.printf(62, 37, id(robotomono), TextAlign::BASELINE_RIGHT , "%.1fÂ°", id(temp).state);
    - id: page3
      lambda: |-
        it.strftime(0, 24, id(pixel), TextAlign::TOP_LEFT, "%Y-%m-%d", id(esptime).now());
        it.strftime(0, 36, id(robotomono), TextAlign::BASELINE_LEFT, "%H:%M:%S", id(esptime).now());
    - id: page4
      lambda: |-
        it.image(0, 0, id(cube_animation), COLOR_ON, COLOR_OFF);

# Change display pages every 7.5 seconds

# Graph display options
graph:
  - id: single_temperature_graph
    sensor: temp
    duration: 5min
    x_grid: 20sec
    width: 64
    height: 48
    line_type: SOLID

# Add rotating empty cube animation
animation:
  - file: "cube_animation.gif"
    id: cube_animation
    resize: 64x48

# Update animation every 5 seconds
interval:
  - interval: 33ms
    then:
      - lambda: |- 
          id(cube_animation).next_frame();
  - interval: 7.5s
    then:
      - display.page.show_next: wyswietlacz
      - component.update: wyswietlacz


# === PART 5: SENSORS, OUTPUTS, FAN, SENSOR TEXT, AND SCRIPTS CONFIGURATION ===

# Sensor configuration
sensor:
  - platform: wifi_signal
    name: ${friendly_name} Signal
    update_interval: 60s
    id: signal
  - platform: pulse_counter
    pin: 
      number: D8
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: predkosc
    name: ${friendly_name} Fan Speed
    filters:
      - multiply: 0.5
  - platform: sht3xd
    temperature:
      name: "${friendly_name} Temperature"
      id: temp
      on_value:
        then:
          - script.execute: set_fan_state
    humidity:
      name: "${friendly_name} Humidity"
    address: 0x45
    update_interval: 15s

# Status LED configuration
status_led:
  pin: 
    number: D4
    inverted: true

# PWM output configuration
output:
  - platform: esp8266_pwm
    pin: D7
    frequency: 25000 Hz
    id: pwmfan

# Fan control configuration
fan:
  platform: speed
  output: pwmfan
  id: noctuafann
  name: ${friendly_name} Control

# Text sensor configuration
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP address
      id: adresIP

# Scripts
script:
  - id: set_fan_state
    then:
      - if:
          condition:
            lambda: |-
              return id(automatic_fan_speed_enabled);
          then:
            - if:
                condition:
                  lambda: |-
                    return id(temp).state < id(${temperature_threshold_low});
                then:
                  - fan.turn_off: noctuafann
                else:
                  - fan.turn_on:
                      id: noctuafann
                      speed: !lambda |-
                        if (id(temp).state >= id(${temperature_threshold_high})) {
                          ESP_LOGD("Fan speed calc", "Temperature is above or equal to upper threshold so setting to max");
                          return 100;
                        }
                        else {
                          float calc_speed = ((100-id(${minimum_fan_speed})) / (id(${temperature_threshold_high})-id(${temperature_threshold_low})))*(id(temp).state-id(${temperature_threshold_low}))+id(${minimum_fan_speed});
                          ESP_LOGD("Fan speed calc", "calculated speed = %f", calc_speed);
                          return calc_speed;
                        }
